<!DOCTYPE html>
<html>
  <head>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
    <script>
      let rock;
      let leaf;
      let g = 9.81; // Accelerazione di gravità (m/s^2)
      let h0 = 0; // Altezza iniziale (pixel)
      let airResistance = 0.01; // Resistenza dell'aria iniziale

      function setup() {
        createCanvas(400, 400);
        createP('');
        let button = createButton('Cambia resistenza dell\'aria');
        button.mousePressed(showAirResistanceControls);
        initializeObjects();
      }

      function initializeObjects() {
        rock = new FallingObject(h0, airResistance);  // Il sasso ha resistenza dell'aria variabile
        leaf = new FallingObject(h0, airResistance * 5);  // La foglia ha resistenza dell'aria 5 volte maggiore
      }

      function showAirResistanceControls() {
        let airResistanceLabel = createP('Resistenza dell\'aria:');
        let airResistanceValue = createSpan(airResistance.toFixed(2));
        airResistanceValue.id('airResistanceValue');
        
        let increaseButton = createButton('+');
        increaseButton.mousePressed(() => changeAirResistance(0.01, airResistanceValue));
        
        let decreaseButton = createButton('-');
        decreaseButton.mousePressed(() => changeAirResistance(-0.01, airResistanceValue));

        // Append the buttons and value display to the document
        airResistanceLabel.parent(document.body);
        decreaseButton.parent(document.body);
        airResistanceValue.parent(document.body);
        increaseButton.parent(document.body);
      }

      function changeAirResistance(change, displayElement) {
        airResistance = constrain(airResistance + change, 0, 0.1); // Limita la resistenza tra 0 e 0.1
        displayElement.html(airResistance.toFixed(2));
        initializeObjects(); // Reinizializza gli oggetti con la nuova resistenza dell'aria
      }

      function draw() {
        background(220);
        rock.update();
        rock.display(width / 2 - 50, 'rock');
        leaf.update();
        leaf.display(width / 2 + 50, 'leaf');
      }

      class FallingObject {
        constructor(initialHeight, airResistance) {
          this.y = initialHeight;
          this.vy = 0; // Velocità iniziale
          this.airResistance = airResistance;
          this.ay = 0; // Accelerazione iniziale
        }

        update() {
          // Calcola l'accelerazione effettiva tenendo conto della resistenza dell'aria
          this.ay = g * (1 - this.airResistance);
          // Aggiorna la velocità
          this.vy += this.ay * 0.1; // Incremento di velocità
          // Aggiorna la posizione
          this.y += this.vy * 0.1; // Incremento di posizione

          // Evita che l'oggetto vada sotto il suolo
          if (this.y > height) {
            this.y = height;
            this.vy = 0; // Ferma l'oggetto quando raggiunge il suolo
          }
        }

        display(x, type) {
          if (type === 'rock') {
            fill(100);
            ellipse(x, this.y, 20, 20);
            this.displayAcceleration(x, this.y);
          } else if (type === 'leaf') {
            fill(50, 205, 50);
            ellipse(x, this.y, 20, 20);
            this.displayAcceleration(x, this.y);
          }
        }

        displayAcceleration(x, y) {
          // Disegna il vettore dell'accelerazione
          stroke(0, 0, 255);
          strokeWeight(4);
          line(x, y, x, y + this.ay * 10); // Scala il vettore per renderlo visibile

          // Mostra il valore numerico dell'accelerazione
          noStroke();
          fill(0);
          textAlign(CENTER);
          text(this.ay.toFixed(2) + ' m/s²', x, y + this.ay * 10 + 15); // Posiziona il valore sotto il vettore
        }
      }
    </script>
  </head>
  <body>
  </body>
</html>


